import { c as createComponent, m as maybeRenderHead, u as unescapeHTML, d as renderTemplate } from './astro/server_DKbU_Q-f.mjs';
import 'kleur/colors';
import 'clsx';

const html = () => "<h1 id=\"css-grid-layout-una-guía-completa\">CSS Grid Layout: Una guía completa</h1>\n<p>CSS Grid Layout es una poderosa herramienta que te permite crear diseños complejos de forma sencilla y flexible. En esta guía, aprenderás cómo utilizar CSS Grid Layout para crear diseños de páginas web modernas y responsivas.</p>\n<h2 id=\"introducción-a-css-grid\">Introducción a CSS Grid</h2>\n<p>CSS Grid Layout es un sistema de diseño bidimensional que te permite crear diseños de páginas web utilizando filas y columnas. Con CSS Grid Layout, puedes crear diseños complejos y flexibles sin necesidad de utilizar floats o frameworks de diseño.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#B392F0\">.container</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  display</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">grid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-columns</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#F97583\">fr</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  gap</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#F97583\">px</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Este grid container creará una cuadrícula con tres columnas y un espacio de 10px entre los elementos de la cuadrícula. También puedes utilizar la propiedad <code>grid-template-rows</code> para definir las filas de la cuadrícula.</p>\n<h2 id=\"grid-items\">Grid Items</h2>\n<p>Los elementos dentro de un grid container se denominan grid items. Puedes colocar los grid items en la cuadrícula utilizando las propiedades <code>grid-column</code> y <code>grid-row</code>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#B392F0\">.item</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-column</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\"> / </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-row</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> / </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Este código colocará el elemento en la segunda y tercera columnas y en la primera y segunda filas de la cuadrícula.</p>\n<h2 id=\"grid-areas\">Grid Areas</h2>\n<p>CSS Grid Layout también te permite definir áreas con nombre en tu cuadrícula. Esto hace que sea más fácil colocar elementos en áreas específicas de la cuadrícula.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#B392F0\">.container</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-areas</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    'header header header'</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    'sidebar content content'</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    'footer footer footer'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">.item</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-area</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">content</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Este código define un grid container con áreas de encabezado, barra lateral, contenido y pie de página. El elemento con la clase <code>item</code> se colocará en el área de contenido de la cuadrícula.</p>\n<h2 id=\"responsive-grids\">Responsive Grids</h2>\n<p>CSS Grid Layout es perfecto para crear diseños responsivos. Puedes utilizar las funciones <code>minmax()</code> y <code>auto-fill</code> para crear cuadrículas que se adapten a diferentes tamaños de pantalla.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\"><code><span class=\"line\"><span style=\"color:#B392F0\">.container</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  display</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">grid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  grid-template-columns</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">auto-fill</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">minmax</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">200</span><span style=\"color:#F97583\">px</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#F97583\">fr</span><span style=\"color:#E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Este código creará una cuadrícula con columnas que tienen al menos 200px de ancho y se expanden para llenar el espacio disponible. La palabra clave <code>auto-fill</code> permite que la cuadrícula cree automáticamente nuevas columnas según sea necesario.</p>\n<h2 id=\"browser-support\">Browser Support</h2>\n<p>CSS Grid Layout es compatible con la mayoría de los navegadores modernos, incluidos Chrome, Firefox, Safari y Edge. Puedes utilizar CSS Grid Layout en tus proyectos web sin preocuparte por la compatibilidad con los navegadores.</p>\n<p>¡Esperamos que esta guía te haya ayudado a comprender mejor CSS Grid Layout y cómo puedes utilizarlo para crear diseños de páginas web modernas y responsivas!</p>";

				const frontmatter = {"title":"CSS Grid Layout - Una guía completa","date":"2023-06-25T00:00:00.000Z","description":"Aprende a utilizar CSS Grid Layout para crear diseños complejos de forma sencilla.","author":"Emily Davis","image":"/assets/images/post-05.png","tags":["CSS","Web Design","Frontend"]};
				const file = "E:/astro-curso/blog-con-astro/src/pages/posts-old/post-05.md";
				const url = "/posts-old/post-05";
				function rawContent() {
					return "   \n                                          \n                \n                                                                                               \n                   \n                                   \n                                 \n   \n\n# CSS Grid Layout: Una guía completa\n\nCSS Grid Layout es una poderosa herramienta que te permite crear diseños complejos de forma sencilla y flexible. En esta guía, aprenderás cómo utilizar CSS Grid Layout para crear diseños de páginas web modernas y responsivas.\n\n## Introducción a CSS Grid\n\nCSS Grid Layout es un sistema de diseño bidimensional que te permite crear diseños de páginas web utilizando filas y columnas. Con CSS Grid Layout, puedes crear diseños complejos y flexibles sin necesidad de utilizar floats o frameworks de diseño.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n}\n```\n\nEste grid container creará una cuadrícula con tres columnas y un espacio de 10px entre los elementos de la cuadrícula. También puedes utilizar la propiedad `grid-template-rows` para definir las filas de la cuadrícula.\n\n## Grid Items\n\nLos elementos dentro de un grid container se denominan grid items. Puedes colocar los grid items en la cuadrícula utilizando las propiedades `grid-column` y `grid-row`.\n\n```css\n.item {\n  grid-column: 2 / 4;\n  grid-row: 1 / 3;\n}\n```\n\nEste código colocará el elemento en la segunda y tercera columnas y en la primera y segunda filas de la cuadrícula.\n\n## Grid Areas\n\nCSS Grid Layout también te permite definir áreas con nombre en tu cuadrícula. Esto hace que sea más fácil colocar elementos en áreas específicas de la cuadrícula.\n\n```css\n.container {\n  grid-template-areas:\n    'header header header'\n    'sidebar content content'\n    'footer footer footer';\n}\n\n.item {\n  grid-area: content;\n}\n```\n\nEste código define un grid container con áreas de encabezado, barra lateral, contenido y pie de página. El elemento con la clase `item` se colocará en el área de contenido de la cuadrícula.\n\n## Responsive Grids\n\nCSS Grid Layout es perfecto para crear diseños responsivos. Puedes utilizar las funciones `minmax()` y `auto-fill` para crear cuadrículas que se adapten a diferentes tamaños de pantalla.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n}\n```\n\nEste código creará una cuadrícula con columnas que tienen al menos 200px de ancho y se expanden para llenar el espacio disponible. La palabra clave `auto-fill` permite que la cuadrícula cree automáticamente nuevas columnas según sea necesario.\n\n## Browser Support\n\nCSS Grid Layout es compatible con la mayoría de los navegadores modernos, incluidos Chrome, Firefox, Safari y Edge. Puedes utilizar CSS Grid Layout en tus proyectos web sin preocuparte por la compatibilidad con los navegadores.\n\n¡Esperamos que esta guía te haya ayudado a comprender mejor CSS Grid Layout y cómo puedes utilizarlo para crear diseños de páginas web modernas y responsivas!\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"css-grid-layout-una-guía-completa","text":"CSS Grid Layout: Una guía completa"},{"depth":2,"slug":"introducción-a-css-grid","text":"Introducción a CSS Grid"},{"depth":2,"slug":"grid-items","text":"Grid Items"},{"depth":2,"slug":"grid-areas","text":"Grid Areas"},{"depth":2,"slug":"responsive-grids","text":"Responsive Grids"},{"depth":2,"slug":"browser-support","text":"Browser Support"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`<meta charset="utf-8">${maybeRenderHead()}${unescapeHTML(html())}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
